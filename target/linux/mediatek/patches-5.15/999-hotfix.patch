diff --git a/drivers/net/ethernet/mediatek/Makefile b/drivers/net/ethernet/mediatek/Makefile
index 41e9b5f2f..696203098 100644
--- a/drivers/net/ethernet/mediatek/Makefile
+++ b/drivers/net/ethernet/mediatek/Makefile
@@ -5,7 +5,7 @@
 
 obj-$(CONFIG_NET_MEDIATEK_SOC) += mtk_eth.o
 mtk_eth-y := mtk_eth_soc.o mtk_sgmii.o mtk_eth_path.o mtk_ppe1.o mtk_ppe_debugfs.o mtk_ppe_offload1.o
-mtk_eth-$(CONFIG_NET_MEDIATEK_SOC_WED) += mtk_wed.o mtk_wed_mcu.o mtk_wed_wo.o
+mtk_eth-$(CONFIG_NET_MEDIATEK_SOC_WED) += mtk_wed.o
 ifdef CONFIG_DEBUG_FS
 mtk_eth-$(CONFIG_NET_MEDIATEK_SOC_WED) += mtk_wed_debugfs.o
 endif
diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.c b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
index b3edf0630..a85254e6a 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@ -2047,7 +2047,6 @@ static int mtk_poll_rx(struct napi_struct *napi, int budget,
 			skb_checksum_none_assert(skb);
 		skb->protocol = eth_type_trans(skb, netdev);
 
-#if 1
 		if (netdev->features & NETIF_F_HW_VLAN_CTAG_RX) {
 			if (MTK_HAS_CAPS(eth->soc->caps, MTK_NETSYS_V2)) {
 				if (trxd.rxd3 & RX_DMA_VTAG_V2)
@@ -2066,17 +2065,19 @@ static int mtk_poll_rx(struct napi_struct *napi, int budget,
 			if (netdev_uses_dsa(netdev))
 				__vlan_hwaccel_clear_tag(skb);
 		}
-#else
+
+#if 0
 		/* When using VLAN untagging in combination with DSA, the
 		 * hardware treats the MTK special tag as a VLAN and untags it.
 		 */
-		if (!MTK_HAS_CAPS(eth->soc->caps, MTK_NETSYS_V2) &&
-		    (trxd.rxd2 & RX_DMA_VTAG) && netdev_uses_dsa(netdev)) {
-			unsigned int port = RX_DMA_VPID(trxd.rxd3) & GENMASK(2, 0);
+		if (skb_vlan_tag_present(skb) && netdev_uses_dsa(netdev)) {
+			unsigned int port = ntohs(skb->vlan_proto) & GENMASK(2, 0);
 
 			if (port < ARRAY_SIZE(eth->dsa_meta) &&
 			    eth->dsa_meta[port])
 				skb_dst_set_noref(skb, &eth->dsa_meta[port]->dst);
+
+			__vlan_hwaccel_clear_tag(skb);
 		}
 #endif
 
@@ -2923,11 +2924,29 @@ static netdev_features_t mtk_fix_features(struct net_device *dev,
 
 static int mtk_set_features(struct net_device *dev, netdev_features_t features)
 {
+	struct mtk_mac *mac = netdev_priv(dev);
+	struct mtk_eth *eth = mac->hw;
 	netdev_features_t diff = dev->features ^ features;
+	int i;
 
 	if ((diff & NETIF_F_LRO) && !(features & NETIF_F_LRO))
 		mtk_hwlro_netdev_disable(dev);
 
+	/* Set RX VLAN offloading */
+	if (!(diff & NETIF_F_HW_VLAN_CTAG_RX))
+		return 0;
+
+	mtk_w32(eth, !!(features & NETIF_F_HW_VLAN_CTAG_RX),
+		MTK_CDMP_EG_CTRL);
+
+	/* sync features with other MAC */
+	for (i = 0; i < MTK_MAC_COUNT; i++) {
+		if (!eth->netdev[i] || eth->netdev[i] == dev)
+			continue;
+		eth->netdev[i]->features &= ~NETIF_F_HW_VLAN_CTAG_RX;
+		eth->netdev[i]->features |= features & NETIF_F_HW_VLAN_CTAG_RX;
+	}
+
 	return 0;
 }
 
@@ -3230,6 +3249,30 @@ static int mtk_open(struct net_device *dev)
 	int err;
 #else
 	int i, err;
+
+	if (mtk_uses_dsa(dev)) {
+		for (i = 0; i < ARRAY_SIZE(eth->dsa_meta); i++) {
+			struct metadata_dst *md_dst = eth->dsa_meta[i];
+
+			if (md_dst)
+				continue;
+
+			md_dst = metadata_dst_alloc(0, METADATA_HW_PORT_MUX,
+						    GFP_KERNEL);
+			if (!md_dst)
+				return -ENOMEM;
+
+			md_dst->u.port_info.port_id = i;
+			eth->dsa_meta[i] = md_dst;
+		}
+	} else {
+		/* Hardware special tag parsing needs to be disabled if at least
+		 * one MAC does not use DSA.
+		 */
+		u32 val = mtk_r32(eth, MTK_CDMP_IG_CTRL);
+		val &= ~MTK_CDMP_STAG_EN;
+		mtk_w32(eth, val, MTK_CDMP_IG_CTRL);
+	}
 #endif
 
 	err = phylink_of_phy_connect(mac->phylink, mac->of_node, 0);
@@ -3269,37 +3312,6 @@ static int mtk_open(struct net_device *dev)
 
 	phylink_start(mac->phylink);
 	netif_start_queue(dev);
-
-#if 0
-	if (MTK_HAS_CAPS(eth->soc->caps, MTK_NETSYS_V2))
-		return 0;
-
-	if (mtk_uses_dsa(dev) && !eth->prog) {
-		for (i = 0; i < ARRAY_SIZE(eth->dsa_meta); i++) {
-			struct metadata_dst *md_dst = eth->dsa_meta[i];
-
-			if (md_dst)
-				continue;
-
-			md_dst = metadata_dst_alloc(0, METADATA_HW_PORT_MUX,
-						    GFP_KERNEL);
-			if (!md_dst)
-				return -ENOMEM;
-
-			md_dst->u.port_info.port_id = i;
-			eth->dsa_meta[i] = md_dst;
-		}
-	} else {
-		/* Hardware special tag parsing needs to be disabled if at least
-		 * one MAC does not use DSA.
-		 */
-		u32 val = mtk_r32(eth, MTK_CDMP_IG_CTRL);
-		val &= ~MTK_CDMP_STAG_EN;
-		mtk_w32(eth, val, MTK_CDMP_IG_CTRL);
-
-		mtk_w32(eth, 0, MTK_CDMP_EG_CTRL);
-	}
-#endif
 	return 0;
 }
 
@@ -3590,18 +3602,16 @@ static int mtk_hw_init(struct mtk_eth *eth)
 	 */
 	val = mtk_r32(eth, MTK_CDMQ_IG_CTRL);
 	mtk_w32(eth, val | MTK_CDMQ_STAG_EN, MTK_CDMQ_IG_CTRL);
-#if 1
-	/* Enable RX VLan Offloading */
-	mtk_w32(eth, 1, MTK_CDMP_EG_CTRL);
-#else
+#if 0
 	if (!MTK_HAS_CAPS(eth->soc->caps, MTK_NETSYS_V2)) {
 		val = mtk_r32(eth, MTK_CDMP_IG_CTRL);
 		mtk_w32(eth, val | MTK_CDMP_STAG_EN, MTK_CDMP_IG_CTRL);
-
-		mtk_w32(eth, 1, MTK_CDMP_EG_CTRL);
 	}
 #endif
 
+	/* Enable RX VLan Offloading */
+	mtk_w32(eth, 1, MTK_CDMP_EG_CTRL);
+
 	/* set interrupt delays based on current Net DIM sample */
 	mtk_dim_rx(&eth->rx_dim.work);
 	mtk_dim_tx(&eth->tx_dim.work);
diff --git a/drivers/net/ethernet/mediatek/mtk_ppe.h b/drivers/net/ethernet/mediatek/mtk_ppe.h
index bef3fb8f8..94289f0f7 100644
--- a/drivers/net/ethernet/mediatek/mtk_ppe.h
+++ b/drivers/net/ethernet/mediatek/mtk_ppe.h
@@ -346,7 +346,6 @@ struct mtk_ppe *mtk_ppe_init(struct mtk_eth *eth, void __iomem *base,
 void mtk_ppe_start(struct mtk_ppe *ppe);
 int mtk_ppe_stop(struct mtk_ppe *ppe);
 
-#if 0
 void __mtk_ppe_check_skb(struct mtk_ppe *ppe, struct sk_buff *skb, u16 hash);
 
 static inline void
@@ -368,7 +367,6 @@ mtk_ppe_check_skb(struct mtk_ppe *ppe, struct sk_buff *skb, u16 hash)
 	ppe->foe_check_time[hash] = now;
 	__mtk_ppe_check_skb(ppe, skb, hash);
 }
-#endif
 
 struct mtk_ppe_account_group *mtk_ppe_account_group_get(u32 idx);
 
diff --git a/drivers/net/ethernet/mediatek/mtk_ppe_offload.c b/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
index b2367d8df..a67404b59 100644
--- a/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
+++ b/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
@@ -561,7 +561,6 @@ mtk_eth_setup_tc_block(struct net_device *dev, struct flow_block_offload *f)
 	struct mtk_eth *eth = mac->hw;
 	static LIST_HEAD(block_cb_list);
 	struct flow_block_cb *block_cb;
-	bool register_block = false;
 	flow_setup_cb_t *cb;
 
 	if (!eth->soc->offload_version)
@@ -576,20 +575,16 @@ mtk_eth_setup_tc_block(struct net_device *dev, struct flow_block_offload *f)
 	switch (f->command) {
 	case FLOW_BLOCK_BIND:
 		block_cb = flow_block_cb_lookup(f->block, cb, dev);
-		if (!block_cb) {
-			block_cb = flow_block_cb_alloc(cb, dev, dev, NULL);
-			if (IS_ERR(block_cb))
-				return PTR_ERR(block_cb);
-
-			register_block = true;
+		if (block_cb) {
+			flow_block_cb_incref(block_cb);
+			return 0;
 		}
+		block_cb = flow_block_cb_alloc(cb, dev, dev, NULL);
+		if (IS_ERR(block_cb))
+			return PTR_ERR(block_cb);
 
-		flow_block_cb_incref(block_cb);
-
-		if (register_block) {
-			flow_block_cb_add(block_cb, f);
-			list_add_tail(&block_cb->driver_list, &block_cb_list);
-		}
+		flow_block_cb_add(block_cb, f);
+		list_add_tail(&block_cb->driver_list, &block_cb_list);
 		return 0;
 	case FLOW_BLOCK_UNBIND:
 		block_cb = flow_block_cb_lookup(f->block, cb, dev);
diff --git a/drivers/net/ethernet/mediatek/mtk_ppe_offload1.c b/drivers/net/ethernet/mediatek/mtk_ppe_offload1.c
index 66946bb49..7cff2f750 100644
--- a/drivers/net/ethernet/mediatek/mtk_ppe_offload1.c
+++ b/drivers/net/ethernet/mediatek/mtk_ppe_offload1.c
@@ -15,9 +15,7 @@
 #include <net/pkt_cls.h>
 #include <net/dsa.h>
 #include "mtk_eth_soc.h"
-#ifdef CONFIG_NET_MEDIATEK_SOC_WED
 #include "mtk_wed.h"
-#endif
 
 static void mtk_foe_entry_clear(struct mtk_ppe *ppe, u16 hash)
 {
@@ -95,7 +93,6 @@ static void mtk_ppe_account_group_walk_stop(void)
 	}
 }
 
-#ifdef CONFIG_NET_MEDIATEK_SOC_WED
 static int
 mtk_flow_get_wdma_info(struct net_device *dev, const u8 *addr, struct mtk_wdma_info *info)
 {
@@ -124,7 +121,6 @@ mtk_flow_get_wdma_info(struct net_device *dev, const u8 *addr, struct mtk_wdma_i
 
 	return 0;
 }
-#endif
 
 static int
 mtk_offload_prepare_v4(struct mtk_eth *eth, struct mtk_foe_entry *entry,
diff --git a/drivers/net/ethernet/mediatek/mtk_wed.c b/drivers/net/ethernet/mediatek/mtk_wed.c
index 4cbfbb238..68c1fdf21 100644
--- a/drivers/net/ethernet/mediatek/mtk_wed.c
+++ b/drivers/net/ethernet/mediatek/mtk_wed.c
@@ -9,7 +9,6 @@
 #include <linux/skbuff.h>
 #include <linux/of_platform.h>
 #include <linux/of_address.h>
-#include <linux/of_reserved_mem.h>
 #include <linux/mfd/syscon.h>
 #include <linux/debugfs.h>
 #include <linux/soc/mediatek/mtk_wed.h>
@@ -17,14 +16,12 @@
 #include "mtk_wed_regs.h"
 #include "mtk_wed.h"
 #include "mtk_ppe.h"
-#include "mtk_wed_wo.h"
 
 #define MTK_PCIE_BASE(n)		(0x1a143000 + (n) * 0x2000)
 
 #define MTK_WED_PKT_SIZE		1900
 #define MTK_WED_BUF_SIZE		2048
 #define MTK_WED_BUF_PER_PAGE		(PAGE_SIZE / 2048)
-#define MTK_WED_RX_RING_SIZE		1536
 
 #define MTK_WED_TX_RING_SIZE		2048
 #define MTK_WED_WDMA_RING_SIZE		1024
@@ -33,10 +30,6 @@
 #define MTK_WED_PER_GROUP_PKT		128
 
 #define MTK_WED_FBUF_SIZE		128
-#define MTK_WED_MIOD_CNT		16
-#define MTK_WED_FB_CMD_CNT		1024
-#define MTK_WED_RRO_QUE_CNT		8192
-#define MTK_WED_MIOD_ENTRY_CNT		128
 
 static struct mtk_wed_hw *hw_list[2];
 static DEFINE_MUTEX(hw_lock);
@@ -71,76 +64,12 @@ wdma_set(struct mtk_wed_device *dev, u32 reg, u32 mask)
 	wdma_m32(dev, reg, 0, mask);
 }
 
-static void
-wdma_clr(struct mtk_wed_device *dev, u32 reg, u32 mask)
-{
-	wdma_m32(dev, reg, mask, 0);
-}
-
-static u32
-wifi_r32(struct mtk_wed_device *dev, u32 reg)
-{
-	return readl(dev->wlan.base + reg);
-}
-
-static void
-wifi_w32(struct mtk_wed_device *dev, u32 reg, u32 val)
-{
-	writel(val, dev->wlan.base + reg);
-}
-
 static u32
 mtk_wed_read_reset(struct mtk_wed_device *dev)
 {
 	return wed_r32(dev, MTK_WED_RESET);
 }
 
-static u32
-mtk_wdma_read_reset(struct mtk_wed_device *dev)
-{
-	return wdma_r32(dev, MTK_WDMA_GLO_CFG);
-}
-
-static void
-mtk_wdma_rx_reset(struct mtk_wed_device *dev)
-{
-	u32 status, mask = MTK_WDMA_GLO_CFG_RX_DMA_BUSY;
-	int i;
-
-	wdma_clr(dev, MTK_WDMA_GLO_CFG, MTK_WDMA_GLO_CFG_RX_DMA_EN);
-	if (readx_poll_timeout(mtk_wdma_read_reset, dev, status,
-			       !(status & mask), 0, 1000))
-		dev_err(dev->hw->dev, "rx reset failed\n");
-
-	for (i = 0; i < ARRAY_SIZE(dev->rx_wdma); i++) {
-		if (dev->rx_wdma[i].desc)
-			continue;
-
-		wdma_w32(dev,
-			 MTK_WDMA_RING_RX(i) + MTK_WED_RING_OFS_CPU_IDX, 0);
-	}
-}
-
-static void
-mtk_wdma_tx_reset(struct mtk_wed_device *dev)
-{
-	u32 status, mask = MTK_WDMA_GLO_CFG_TX_DMA_BUSY;
-	int i;
-
-	wdma_clr(dev, MTK_WDMA_GLO_CFG, MTK_WDMA_GLO_CFG_TX_DMA_EN);
-	if (readx_poll_timeout(mtk_wdma_read_reset, dev, status,
-			       !(status & mask), 0, 1000))
-		dev_err(dev->hw->dev, "tx reset failed\n");
-
-	for (i = 0; i < ARRAY_SIZE(dev->tx_wdma); i++) {
-		if (dev->tx_wdma[i].desc)
-			continue;
-
-		wdma_w32(dev,
-			 MTK_WDMA_RING_TX(i) + MTK_WED_RING_OFS_CPU_IDX, 0);
-	}
-}
-
 static void
 mtk_wed_reset(struct mtk_wed_device *dev, u32 mask)
 {
@@ -152,54 +81,6 @@ mtk_wed_reset(struct mtk_wed_device *dev, u32 mask)
 		WARN_ON_ONCE(1);
 }
 
-static u32
-mtk_wed_wo_read_status(struct mtk_wed_device *dev)
-{
-	return wed_r32(dev, MTK_WED_SCR0 + 4 * MTK_WED_DUMMY_CR_WO_STATUS);
-}
-
-static void
-mtk_wed_wo_reset(struct mtk_wed_device *dev)
-{
-	struct mtk_wed_wo *wo = dev->hw->wed_wo;
-	u8 state = MTK_WED_WO_STATE_DISABLE;
-	void __iomem *reg;
-	u32 val;
-
-	mtk_wdma_tx_reset(dev);
-	mtk_wed_reset(dev, MTK_WED_RESET_WED);
-
-	mtk_wed_mcu_send_msg(wo, MTK_WED_MODULE_ID_WO,
-			     MTK_WED_WO_CMD_CHANGE_STATE, &state,
-			     sizeof(state), false);
-
-	if (readx_poll_timeout(mtk_wed_wo_read_status, dev, val,
-			       val == MTK_WED_WOIF_DISABLE_DONE,
-			       100, MTK_WOCPU_TIMEOUT))
-		dev_err(dev->hw->dev, "failed to disable wed-wo\n");
-
-	reg = ioremap(MTK_WED_WO_CPU_MCUSYS_RESET_ADDR, 4);
-
-	val = readl(reg);
-	switch (dev->hw->index) {
-	case 0:
-		val |= MTK_WED_WO_CPU_WO0_MCUSYS_RESET_MASK;
-		writel(val, reg);
-		val &= ~MTK_WED_WO_CPU_WO0_MCUSYS_RESET_MASK;
-		writel(val, reg);
-		break;
-	case 1:
-		val |= MTK_WED_WO_CPU_WO1_MCUSYS_RESET_MASK;
-		writel(val, reg);
-		val &= ~MTK_WED_WO_CPU_WO1_MCUSYS_RESET_MASK;
-		writel(val, reg);
-		break;
-	default:
-		break;
-	}
-	iounmap(reg);
-}
-
 static struct mtk_wed_hw *
 mtk_wed_assign(struct mtk_wed_device *dev)
 {
@@ -234,7 +115,7 @@ mtk_wed_assign(struct mtk_wed_device *dev)
 }
 
 static int
-mtk_wed_tx_buffer_alloc(struct mtk_wed_device *dev)
+mtk_wed_buffer_alloc(struct mtk_wed_device *dev)
 {
 	struct mtk_wdma_desc *desc;
 	dma_addr_t desc_phys;
@@ -251,16 +132,16 @@ mtk_wed_tx_buffer_alloc(struct mtk_wed_device *dev)
 	if (!page_list)
 		return -ENOMEM;
 
-	dev->tx_buf_ring.size = ring_size;
-	dev->tx_buf_ring.pages = page_list;
+	dev->buf_ring.size = ring_size;
+	dev->buf_ring.pages = page_list;
 
 	desc = dma_alloc_coherent(dev->hw->dev, ring_size * sizeof(*desc),
 				  &desc_phys, GFP_KERNEL);
 	if (!desc)
 		return -ENOMEM;
 
-	dev->tx_buf_ring.desc = desc;
-	dev->tx_buf_ring.desc_phys = desc_phys;
+	dev->buf_ring.desc = desc;
+	dev->buf_ring.desc_phys = desc_phys;
 
 	for (i = 0, page_idx = 0; i < ring_size; i += MTK_WED_BUF_PER_PAGE) {
 		dma_addr_t page_phys, buf_phys;
@@ -321,10 +202,10 @@ mtk_wed_tx_buffer_alloc(struct mtk_wed_device *dev)
 }
 
 static void
-mtk_wed_free_tx_buffer(struct mtk_wed_device *dev)
+mtk_wed_free_buffer(struct mtk_wed_device *dev)
 {
-	struct mtk_wdma_desc *desc = dev->tx_buf_ring.desc;
-	void **page_list = dev->tx_buf_ring.pages;
+	struct mtk_wdma_desc *desc = dev->buf_ring.desc;
+	void **page_list = dev->buf_ring.pages;
 	int page_idx;
 	int i;
 
@@ -334,8 +215,7 @@ mtk_wed_free_tx_buffer(struct mtk_wed_device *dev)
 	if (!desc)
 		goto free_pagelist;
 
-	for (i = 0, page_idx = 0; i < dev->tx_buf_ring.size;
-	     i += MTK_WED_BUF_PER_PAGE) {
+	for (i = 0, page_idx = 0; i < dev->buf_ring.size; i += MTK_WED_BUF_PER_PAGE) {
 		void *page = page_list[page_idx++];
 		dma_addr_t buf_addr;
 
@@ -348,59 +228,13 @@ mtk_wed_free_tx_buffer(struct mtk_wed_device *dev)
 		__free_page(page);
 	}
 
-	dma_free_coherent(dev->hw->dev, dev->tx_buf_ring.size * sizeof(*desc),
-			  desc, dev->tx_buf_ring.desc_phys);
+	dma_free_coherent(dev->hw->dev, dev->buf_ring.size * sizeof(*desc),
+			  desc, dev->buf_ring.desc_phys);
 
 free_pagelist:
 	kfree(page_list);
 }
 
-static int
-mtk_wed_rx_buffer_alloc(struct mtk_wed_device *dev)
-{
-	struct mtk_rxbm_desc *desc;
-	dma_addr_t desc_phys;
-
-	dev->rx_buf_ring.size = dev->wlan.rx_nbuf;
-	desc = dma_alloc_coherent(dev->hw->dev,
-				  dev->wlan.rx_nbuf * sizeof(*desc),
-				  &desc_phys, GFP_KERNEL);
-	if (!desc)
-		return -ENOMEM;
-
-	dev->rx_buf_ring.desc = desc;
-	dev->rx_buf_ring.desc_phys = desc_phys;
-	dev->wlan.init_rx_buf(dev, dev->wlan.rx_npkt);
-
-	return 0;
-}
-
-static void
-mtk_wed_free_rx_buffer(struct mtk_wed_device *dev)
-{
-	struct mtk_rxbm_desc *desc = dev->rx_buf_ring.desc;
-
-	if (!desc)
-		return;
-
-	dev->wlan.release_rx_buf(dev);
-	dma_free_coherent(dev->hw->dev, dev->rx_buf_ring.size * sizeof(*desc),
-			  desc, dev->rx_buf_ring.desc_phys);
-}
-
-static void
-mtk_wed_rx_buffer_hw_init(struct mtk_wed_device *dev)
-{
-	wed_w32(dev, MTK_WED_RX_BM_RX_DMAD,
-		FIELD_PREP(MTK_WED_RX_BM_RX_DMAD_SDL0, dev->wlan.rx_size));
-	wed_w32(dev, MTK_WED_RX_BM_BASE, dev->rx_buf_ring.desc_phys);
-	wed_w32(dev, MTK_WED_RX_BM_INIT_PTR, MTK_WED_RX_BM_INIT_SW_TAIL |
-		FIELD_PREP(MTK_WED_RX_BM_SW_TAIL, dev->wlan.rx_npkt));
-	wed_w32(dev, MTK_WED_RX_BM_DYN_ALLOC_TH,
-		FIELD_PREP(MTK_WED_RX_BM_DYN_ALLOC_TH_H, 0xffff));
-	wed_set(dev, MTK_WED_CTRL, MTK_WED_CTRL_WED_RX_BM_EN);
-}
-
 static void
 mtk_wed_free_ring(struct mtk_wed_device *dev, struct mtk_wed_ring *ring)
 {
@@ -411,13 +245,6 @@ mtk_wed_free_ring(struct mtk_wed_device *dev, struct mtk_wed_ring *ring)
 			  ring->desc, ring->desc_phys);
 }
 
-static void
-mtk_wed_free_rx_rings(struct mtk_wed_device *dev)
-{
-	mtk_wed_free_rx_buffer(dev);
-	mtk_wed_free_ring(dev, &dev->rro.ring);
-}
-
 static void
 mtk_wed_free_tx_rings(struct mtk_wed_device *dev)
 {
@@ -425,8 +252,8 @@ mtk_wed_free_tx_rings(struct mtk_wed_device *dev)
 
 	for (i = 0; i < ARRAY_SIZE(dev->tx_ring); i++)
 		mtk_wed_free_ring(dev, &dev->tx_ring[i]);
-	for (i = 0; i < ARRAY_SIZE(dev->rx_wdma); i++)
-		mtk_wed_free_ring(dev, &dev->rx_wdma[i]);
+	for (i = 0; i < ARRAY_SIZE(dev->tx_wdma); i++)
+		mtk_wed_free_ring(dev, &dev->tx_wdma[i]);
 }
 
 static void
@@ -463,38 +290,6 @@ mtk_wed_set_512_support(struct mtk_wed_device *dev, bool enable)
 	}
 }
 
-#define MTK_WFMDA_RX_DMA_EN	BIT(2)
-static void
-mtk_wed_check_wfdma_rx_fill(struct mtk_wed_device *dev, int idx)
-{
-	u32 val;
-	int i;
-
-	if (!(dev->rx_ring[idx].flags & MTK_WED_RING_CONFIGURED))
-		return; /* queue is not configured by mt76 */
-
-	for (i = 0; i < 3; i++) {
-		u32 cur_idx;
-
-		cur_idx = wed_r32(dev,
-				  MTK_WED_WPDMA_RING_RX_DATA(idx) +
-				  MTK_WED_RING_OFS_CPU_IDX);
-		if (cur_idx == MTK_WED_RX_RING_SIZE - 1)
-			break;
-
-		usleep_range(100000, 200000);
-	}
-
-	if (i == 3) {
-		dev_err(dev->hw->dev, "rx dma enable failed\n");
-		return;
-	}
-
-	val = wifi_r32(dev, dev->wlan.wpdma_rx_glo - dev->wlan.phy_base) |
-	      MTK_WFMDA_RX_DMA_EN;
-	wifi_w32(dev, dev->wlan.wpdma_rx_glo - dev->wlan.phy_base, val);
-}
-
 static void
 mtk_wed_dma_disable(struct mtk_wed_device *dev)
 {
@@ -508,25 +303,20 @@ mtk_wed_dma_disable(struct mtk_wed_device *dev)
 		MTK_WED_GLO_CFG_TX_DMA_EN |
 		MTK_WED_GLO_CFG_RX_DMA_EN);
 
-	wdma_clr(dev, MTK_WDMA_GLO_CFG,
+	wdma_m32(dev, MTK_WDMA_GLO_CFG,
 		 MTK_WDMA_GLO_CFG_TX_DMA_EN |
 		 MTK_WDMA_GLO_CFG_RX_INFO1_PRERES |
-		 MTK_WDMA_GLO_CFG_RX_INFO2_PRERES);
+		 MTK_WDMA_GLO_CFG_RX_INFO2_PRERES, 0);
 
 	if (dev->hw->version == 1) {
 		regmap_write(dev->hw->mirror, dev->hw->index * 4, 0);
-		wdma_clr(dev, MTK_WDMA_GLO_CFG,
-			 MTK_WDMA_GLO_CFG_RX_INFO3_PRERES);
+		wdma_m32(dev, MTK_WDMA_GLO_CFG,
+			 MTK_WDMA_GLO_CFG_RX_INFO3_PRERES, 0);
 	} else {
 		wed_clr(dev, MTK_WED_WPDMA_GLO_CFG,
 			MTK_WED_WPDMA_GLO_CFG_RX_DRV_R0_PKT_PROC |
 			MTK_WED_WPDMA_GLO_CFG_RX_DRV_R0_CRX_SYNC);
 
-		wed_clr(dev, MTK_WED_WPDMA_RX_D_GLO_CFG,
-			MTK_WED_WPDMA_RX_D_RX_DRV_EN);
-		wed_clr(dev, MTK_WED_WDMA_GLO_CFG,
-			MTK_WED_WDMA_GLO_CFG_TX_DDONE_CHK);
-
 		mtk_wed_set_512_support(dev, false);
 	}
 }
@@ -547,13 +337,6 @@ mtk_wed_stop(struct mtk_wed_device *dev)
 	wdma_w32(dev, MTK_WDMA_INT_MASK, 0);
 	wdma_w32(dev, MTK_WDMA_INT_GRP2, 0);
 	wed_w32(dev, MTK_WED_WPDMA_INT_MASK, 0);
-
-	if (dev->hw->version == 1)
-		return;
-
-	wed_w32(dev, MTK_WED_EXT_INT_MASK1, 0);
-	wed_w32(dev, MTK_WED_EXT_INT_MASK2, 0);
-	wed_clr(dev, MTK_WED_CTRL, MTK_WED_CTRL_WED_RX_BM_EN);
 }
 
 static void
@@ -569,22 +352,10 @@ mtk_wed_detach(struct mtk_wed_device *dev)
 	wdma_w32(dev, MTK_WDMA_RESET_IDX, 0);
 
 	mtk_wed_reset(dev, MTK_WED_RESET_WED);
-	if (mtk_wed_get_rx_capa(dev)) {
-		wdma_clr(dev, MTK_WDMA_GLO_CFG, MTK_WDMA_GLO_CFG_TX_DMA_EN);
-		wdma_w32(dev, MTK_WDMA_RESET_IDX, MTK_WDMA_RESET_IDX_TX);
-		wdma_w32(dev, MTK_WDMA_RESET_IDX, 0);
-	}
 
-	mtk_wed_free_tx_buffer(dev);
+	mtk_wed_free_buffer(dev);
 	mtk_wed_free_tx_rings(dev);
 
-	if (mtk_wed_get_rx_capa(dev)) {
-		mtk_wed_wo_reset(dev);
-		mtk_wed_free_rx_rings(dev);
-		mtk_wed_wo_deinit(hw);
-		mtk_wdma_rx_reset(dev);
-	}
-
 	if (dev->wlan.bus_type == MTK_WED_BUS_PCIE) {
 		struct device_node *wlan_node;
 
@@ -667,12 +438,10 @@ mtk_wed_set_wpdma(struct mtk_wed_device *dev)
 	} else {
 		mtk_wed_bus_init(dev);
 
-		wed_w32(dev, MTK_WED_WPDMA_CFG_BASE, dev->wlan.wpdma_int);
-		wed_w32(dev, MTK_WED_WPDMA_CFG_INT_MASK, dev->wlan.wpdma_mask);
-		wed_w32(dev, MTK_WED_WPDMA_CFG_TX, dev->wlan.wpdma_tx);
-		wed_w32(dev, MTK_WED_WPDMA_CFG_TX_FREE, dev->wlan.wpdma_txfree);
-		wed_w32(dev, MTK_WED_WPDMA_RX_GLO_CFG, dev->wlan.wpdma_rx_glo);
-		wed_w32(dev, MTK_WED_WPDMA_RX_RING, dev->wlan.wpdma_rx);
+		wed_w32(dev, MTK_WED_WPDMA_CFG_BASE,  dev->wlan.wpdma_int);
+		wed_w32(dev, MTK_WED_WPDMA_CFG_INT_MASK,  dev->wlan.wpdma_mask);
+		wed_w32(dev, MTK_WED_WPDMA_CFG_TX,  dev->wlan.wpdma_tx);
+		wed_w32(dev, MTK_WED_WPDMA_CFG_TX_FREE,  dev->wlan.wpdma_txfree);
 	}
 }
 
@@ -722,132 +491,6 @@ mtk_wed_hw_init_early(struct mtk_wed_device *dev)
 	}
 }
 
-static int
-mtk_wed_rro_ring_alloc(struct mtk_wed_device *dev, struct mtk_wed_ring *ring,
-		       int size)
-{
-	ring->desc = dma_alloc_coherent(dev->hw->dev,
-					size * sizeof(*ring->desc),
-					&ring->desc_phys, GFP_KERNEL);
-	if (!ring->desc)
-		return -ENOMEM;
-
-	ring->desc_size = sizeof(*ring->desc);
-	ring->size = size;
-	memset(ring->desc, 0, size);
-
-	return 0;
-}
-
-#define MTK_WED_MIOD_COUNT	(MTK_WED_MIOD_ENTRY_CNT * MTK_WED_MIOD_CNT)
-static int
-mtk_wed_rro_alloc(struct mtk_wed_device *dev)
-{
-	struct reserved_mem *rmem;
-	struct device_node *np;
-	int index;
-
-	index = of_property_match_string(dev->hw->node, "memory-region-names",
-					 "wo-dlm");
-	if (index < 0)
-		return index;
-
-	np = of_parse_phandle(dev->hw->node, "memory-region", index);
-	if (!np)
-		return -ENODEV;
-
-	rmem = of_reserved_mem_lookup(np);
-	of_node_put(np);
-
-	if (!rmem)
-		return -ENODEV;
-
-	dev->rro.miod_phys = rmem->base;
-	dev->rro.fdbk_phys = MTK_WED_MIOD_COUNT + dev->rro.miod_phys;
-
-	return mtk_wed_rro_ring_alloc(dev, &dev->rro.ring,
-				      MTK_WED_RRO_QUE_CNT);
-}
-
-static int
-mtk_wed_rro_cfg(struct mtk_wed_device *dev)
-{
-	struct mtk_wed_wo *wo = dev->hw->wed_wo;
-	struct {
-		struct {
-			__le32 base;
-			__le32 cnt;
-			__le32 unit;
-		} ring[2];
-		__le32 wed;
-		u8 version;
-	} req = {
-		.ring[0] = {
-			.base = cpu_to_le32(MTK_WED_WOCPU_VIEW_MIOD_BASE),
-			.cnt = cpu_to_le32(MTK_WED_MIOD_CNT),
-			.unit = cpu_to_le32(MTK_WED_MIOD_ENTRY_CNT),
-		},
-		.ring[1] = {
-			.base = cpu_to_le32(MTK_WED_WOCPU_VIEW_MIOD_BASE +
-					    MTK_WED_MIOD_COUNT),
-			.cnt = cpu_to_le32(MTK_WED_FB_CMD_CNT),
-			.unit = cpu_to_le32(4),
-		},
-	};
-
-	return mtk_wed_mcu_send_msg(wo, MTK_WED_MODULE_ID_WO,
-				    MTK_WED_WO_CMD_WED_CFG,
-				    &req, sizeof(req), true);
-}
-
-static void
-mtk_wed_rro_hw_init(struct mtk_wed_device *dev)
-{
-	wed_w32(dev, MTK_WED_RROQM_MIOD_CFG,
-		FIELD_PREP(MTK_WED_RROQM_MIOD_MID_DW, 0x70 >> 2) |
-		FIELD_PREP(MTK_WED_RROQM_MIOD_MOD_DW, 0x10 >> 2) |
-		FIELD_PREP(MTK_WED_RROQM_MIOD_ENTRY_DW,
-			   MTK_WED_MIOD_ENTRY_CNT >> 2));
-
-	wed_w32(dev, MTK_WED_RROQM_MIOD_CTRL0, dev->rro.miod_phys);
-	wed_w32(dev, MTK_WED_RROQM_MIOD_CTRL1,
-		FIELD_PREP(MTK_WED_RROQM_MIOD_CNT, MTK_WED_MIOD_CNT));
-	wed_w32(dev, MTK_WED_RROQM_FDBK_CTRL0, dev->rro.fdbk_phys);
-	wed_w32(dev, MTK_WED_RROQM_FDBK_CTRL1,
-		FIELD_PREP(MTK_WED_RROQM_FDBK_CNT, MTK_WED_FB_CMD_CNT));
-	wed_w32(dev, MTK_WED_RROQM_FDBK_CTRL2, 0);
-	wed_w32(dev, MTK_WED_RROQ_BASE_L, dev->rro.ring.desc_phys);
-
-	wed_set(dev, MTK_WED_RROQM_RST_IDX,
-		MTK_WED_RROQM_RST_IDX_MIOD |
-		MTK_WED_RROQM_RST_IDX_FDBK);
-
-	wed_w32(dev, MTK_WED_RROQM_RST_IDX, 0);
-	wed_w32(dev, MTK_WED_RROQM_MIOD_CTRL2, MTK_WED_MIOD_CNT - 1);
-	wed_set(dev, MTK_WED_CTRL, MTK_WED_CTRL_RX_RRO_QM_EN);
-}
-
-static void
-mtk_wed_route_qm_hw_init(struct mtk_wed_device *dev)
-{
-	wed_w32(dev, MTK_WED_RESET, MTK_WED_RESET_RX_ROUTE_QM);
-
-	for (;;) {
-		usleep_range(100, 200);
-		if (!(wed_r32(dev, MTK_WED_RESET) & MTK_WED_RESET_RX_ROUTE_QM))
-			break;
-	}
-
-	/* configure RX_ROUTE_QM */
-	wed_clr(dev, MTK_WED_RTQM_GLO_CFG, MTK_WED_RTQM_Q_RST);
-	wed_clr(dev, MTK_WED_RTQM_GLO_CFG, MTK_WED_RTQM_TXDMAD_FPORT);
-	wed_set(dev, MTK_WED_RTQM_GLO_CFG,
-		FIELD_PREP(MTK_WED_RTQM_TXDMAD_FPORT, 0x3 + dev->hw->index));
-	wed_clr(dev, MTK_WED_RTQM_GLO_CFG, MTK_WED_RTQM_Q_RST);
-	/* enable RX_ROUTE_QM */
-	wed_set(dev, MTK_WED_CTRL, MTK_WED_CTRL_RX_ROUTE_QM_EN);
-}
-
 static void
 mtk_wed_hw_init(struct mtk_wed_device *dev)
 {
@@ -859,11 +502,11 @@ mtk_wed_hw_init(struct mtk_wed_device *dev)
 	wed_w32(dev, MTK_WED_TX_BM_CTRL,
 		MTK_WED_TX_BM_CTRL_PAUSE |
 		FIELD_PREP(MTK_WED_TX_BM_CTRL_VLD_GRP_NUM,
-			   dev->tx_buf_ring.size / 128) |
+			   dev->buf_ring.size / 128) |
 		FIELD_PREP(MTK_WED_TX_BM_CTRL_RSV_GRP_NUM,
 			   MTK_WED_TX_RING_SIZE / 256));
 
-	wed_w32(dev, MTK_WED_TX_BM_BASE, dev->tx_buf_ring.desc_phys);
+	wed_w32(dev, MTK_WED_TX_BM_BASE, dev->buf_ring.desc_phys);
 
 	wed_w32(dev, MTK_WED_TX_BM_BUF_LEN, MTK_WED_PKT_SIZE);
 
@@ -890,9 +533,9 @@ mtk_wed_hw_init(struct mtk_wed_device *dev)
 		wed_w32(dev, MTK_WED_TX_TKID_CTRL,
 			MTK_WED_TX_TKID_CTRL_PAUSE |
 			FIELD_PREP(MTK_WED_TX_TKID_CTRL_VLD_GRP_NUM,
-				   dev->tx_buf_ring.size / 128) |
+				   dev->buf_ring.size / 128) |
 			FIELD_PREP(MTK_WED_TX_TKID_CTRL_RSV_GRP_NUM,
-				   dev->tx_buf_ring.size / 128));
+				   dev->buf_ring.size / 128));
 		wed_w32(dev, MTK_WED_TX_TKID_DYN_THR,
 			FIELD_PREP(MTK_WED_TX_TKID_DYN_THR_LO, 0) |
 			MTK_WED_TX_TKID_DYN_THR_HI);
@@ -900,28 +543,18 @@ mtk_wed_hw_init(struct mtk_wed_device *dev)
 
 	mtk_wed_reset(dev, MTK_WED_RESET_TX_BM);
 
-	if (dev->hw->version == 1) {
+	if (dev->hw->version == 1)
 		wed_set(dev, MTK_WED_CTRL,
 			MTK_WED_CTRL_WED_TX_BM_EN |
 			MTK_WED_CTRL_WED_TX_FREE_AGENT_EN);
-	} else {
+	else
 		wed_clr(dev, MTK_WED_TX_TKID_CTRL, MTK_WED_TX_TKID_CTRL_PAUSE);
-		/* rx hw init */
-		wed_w32(dev, MTK_WED_WPDMA_RX_D_RST_IDX,
-			MTK_WED_WPDMA_RX_D_RST_CRX_IDX |
-			MTK_WED_WPDMA_RX_D_RST_DRV_IDX);
-		wed_w32(dev, MTK_WED_WPDMA_RX_D_RST_IDX, 0);
-
-		mtk_wed_rx_buffer_hw_init(dev);
-		mtk_wed_rro_hw_init(dev);
-		mtk_wed_route_qm_hw_init(dev);
-	}
 
 	wed_clr(dev, MTK_WED_TX_BM_CTRL, MTK_WED_TX_BM_CTRL_PAUSE);
 }
 
 static void
-mtk_wed_ring_reset(struct mtk_wed_ring *ring, int size, bool tx)
+mtk_wed_ring_reset(struct mtk_wed_ring *ring, int size)
 {
 	void *head = (void *)ring->desc;
 	int i;
@@ -931,10 +564,7 @@ mtk_wed_ring_reset(struct mtk_wed_ring *ring, int size, bool tx)
 
 		desc = (struct mtk_wdma_desc *)(head + i * ring->desc_size);
 		desc->buf0 = 0;
-		if (tx)
-			desc->ctrl = cpu_to_le32(MTK_WDMA_DESC_CTRL_DMA_DONE);
-		else
-			desc->ctrl = cpu_to_le32(MTK_WFDMA_DESC_CTRL_TO_HOST);
+		desc->ctrl = cpu_to_le32(MTK_WDMA_DESC_CTRL_DMA_DONE);
 		desc->buf1 = 0;
 		desc->info = 0;
 	}
@@ -990,8 +620,7 @@ mtk_wed_reset_dma(struct mtk_wed_device *dev)
 		if (!dev->tx_ring[i].desc)
 			continue;
 
-		mtk_wed_ring_reset(&dev->tx_ring[i], MTK_WED_TX_RING_SIZE,
-				   true);
+		mtk_wed_ring_reset(&dev->tx_ring[i], MTK_WED_TX_RING_SIZE);
 	}
 
 	if (mtk_wed_poll_busy(dev))
@@ -1009,9 +638,6 @@ mtk_wed_reset_dma(struct mtk_wed_device *dev)
 	wdma_w32(dev, MTK_WDMA_RESET_IDX, MTK_WDMA_RESET_IDX_RX);
 	wdma_w32(dev, MTK_WDMA_RESET_IDX, 0);
 
-	if (mtk_wed_get_rx_capa(dev))
-		mtk_wdma_rx_reset(dev);
-
 	if (busy) {
 		mtk_wed_reset(dev, MTK_WED_RESET_WDMA_INT_AGENT);
 		mtk_wed_reset(dev, MTK_WED_RESET_WDMA_RX_DRV);
@@ -1046,11 +672,12 @@ mtk_wed_reset_dma(struct mtk_wed_device *dev)
 			MTK_WED_WPDMA_RESET_IDX_RX);
 		wed_w32(dev, MTK_WED_WPDMA_RESET_IDX, 0);
 	}
+
 }
 
 static int
 mtk_wed_ring_alloc(struct mtk_wed_device *dev, struct mtk_wed_ring *ring,
-		   int size, u32 desc_size, bool tx)
+		   int size, u32 desc_size)
 {
 	ring->desc = dma_alloc_coherent(dev->hw->dev, size * desc_size,
 					&ring->desc_phys, GFP_KERNEL);
@@ -1059,23 +686,18 @@ mtk_wed_ring_alloc(struct mtk_wed_device *dev, struct mtk_wed_ring *ring,
 
 	ring->desc_size = desc_size;
 	ring->size = size;
-	mtk_wed_ring_reset(ring, size, tx);
+	mtk_wed_ring_reset(ring, size);
 
 	return 0;
 }
 
 static int
-mtk_wed_wdma_rx_ring_setup(struct mtk_wed_device *dev, int idx, int size)
+mtk_wed_wdma_ring_setup(struct mtk_wed_device *dev, int idx, int size)
 {
 	u32 desc_size = sizeof(struct mtk_wdma_desc) * dev->hw->version;
-	struct mtk_wed_ring *wdma;
-
-	if (idx >= ARRAY_SIZE(dev->rx_wdma))
-		return -EINVAL;
+	struct mtk_wed_ring *wdma = &dev->tx_wdma[idx];
 
-	wdma = &dev->rx_wdma[idx];
-	if (mtk_wed_ring_alloc(dev, wdma, MTK_WED_WDMA_RING_SIZE, desc_size,
-			       true))
+	if (mtk_wed_ring_alloc(dev, wdma, MTK_WED_WDMA_RING_SIZE, desc_size))
 		return -ENOMEM;
 
 	wdma_w32(dev, MTK_WDMA_RING_RX(idx) + MTK_WED_RING_OFS_BASE,
@@ -1092,60 +714,6 @@ mtk_wed_wdma_rx_ring_setup(struct mtk_wed_device *dev, int idx, int size)
 	return 0;
 }
 
-static int
-mtk_wed_wdma_tx_ring_setup(struct mtk_wed_device *dev, int idx, int size)
-{
-	u32 desc_size = sizeof(struct mtk_wdma_desc) * dev->hw->version;
-	struct mtk_wed_ring *wdma;
-
-	if (idx >= ARRAY_SIZE(dev->tx_wdma))
-		return -EINVAL;
-
-	wdma = &dev->tx_wdma[idx];
-	if (mtk_wed_ring_alloc(dev, wdma, MTK_WED_WDMA_RING_SIZE, desc_size,
-			       true))
-		return -ENOMEM;
-
-	wdma_w32(dev, MTK_WDMA_RING_TX(idx) + MTK_WED_RING_OFS_BASE,
-		 wdma->desc_phys);
-	wdma_w32(dev, MTK_WDMA_RING_TX(idx) + MTK_WED_RING_OFS_COUNT,
-		 size);
-	wdma_w32(dev, MTK_WDMA_RING_TX(idx) + MTK_WED_RING_OFS_CPU_IDX, 0);
-	wdma_w32(dev, MTK_WDMA_RING_TX(idx) + MTK_WED_RING_OFS_DMA_IDX, 0);
-
-	if (!idx)  {
-		wed_w32(dev, MTK_WED_WDMA_RING_TX + MTK_WED_RING_OFS_BASE,
-			wdma->desc_phys);
-		wed_w32(dev, MTK_WED_WDMA_RING_TX + MTK_WED_RING_OFS_COUNT,
-			size);
-		wed_w32(dev, MTK_WED_WDMA_RING_TX + MTK_WED_RING_OFS_CPU_IDX,
-			0);
-		wed_w32(dev, MTK_WED_WDMA_RING_TX + MTK_WED_RING_OFS_DMA_IDX,
-			0);
-	}
-
-	return 0;
-}
-
-static void
-mtk_wed_ppe_check(struct mtk_wed_device *dev, struct sk_buff *skb,
-		  u32 reason, u32 hash)
-{
-	struct mtk_eth *eth = dev->hw->eth;
-	struct ethhdr *eh;
-
-	if (!skb)
-		return;
-
-	if (reason != MTK_PPE_CPU_REASON_HIT_UNBIND_RATE_REACHED)
-		return;
-
-	skb_set_mac_header(skb, 0);
-	eh = eth_hdr(skb);
-	skb->protocol = eh->h_proto;
-	//mtk_ppe_check_skb(eth->ppe[dev->hw->index], skb, hash);
-}
-
 static void
 mtk_wed_configure_irq(struct mtk_wed_device *dev, u32 irq_mask)
 {
@@ -1168,8 +736,6 @@ mtk_wed_configure_irq(struct mtk_wed_device *dev, u32 irq_mask)
 
 		wed_clr(dev, MTK_WED_WDMA_INT_CTRL, wdma_mask);
 	} else {
-		wdma_mask |= FIELD_PREP(MTK_WDMA_INT_MASK_TX_DONE,
-					GENMASK(1, 0));
 		/* initail tx interrupt trigger */
 		wed_w32(dev, MTK_WED_WPDMA_INT_CTRL_TX,
 			MTK_WED_WPDMA_INT_CTRL_TX0_DONE_EN |
@@ -1188,16 +754,6 @@ mtk_wed_configure_irq(struct mtk_wed_device *dev, u32 irq_mask)
 			FIELD_PREP(MTK_WED_WPDMA_INT_CTRL_TX_FREE_DONE_TRIG,
 				   dev->wlan.txfree_tbit));
 
-		wed_w32(dev, MTK_WED_WPDMA_INT_CTRL_RX,
-			MTK_WED_WPDMA_INT_CTRL_RX0_EN |
-			MTK_WED_WPDMA_INT_CTRL_RX0_CLR |
-			MTK_WED_WPDMA_INT_CTRL_RX1_EN |
-			MTK_WED_WPDMA_INT_CTRL_RX1_CLR |
-			FIELD_PREP(MTK_WED_WPDMA_INT_CTRL_RX0_DONE_TRIG,
-				   dev->wlan.rx_tbit[0]) |
-			FIELD_PREP(MTK_WED_WPDMA_INT_CTRL_RX1_DONE_TRIG,
-				   dev->wlan.rx_tbit[1]));
-
 		wed_w32(dev, MTK_WED_WDMA_INT_CLR, wdma_mask);
 		wed_set(dev, MTK_WED_WDMA_INT_CTRL,
 			FIELD_PREP(MTK_WED_WDMA_INT_CTRL_POLL_SRC_SEL,
@@ -1235,15 +791,9 @@ mtk_wed_dma_enable(struct mtk_wed_device *dev)
 		wdma_set(dev, MTK_WDMA_GLO_CFG,
 			 MTK_WDMA_GLO_CFG_RX_INFO3_PRERES);
 	} else {
-		int i;
-
 		wed_set(dev, MTK_WED_WPDMA_CTRL,
 			MTK_WED_WPDMA_CTRL_SDL1_FIXED);
 
-		wed_set(dev, MTK_WED_WDMA_GLO_CFG,
-			MTK_WED_WDMA_GLO_CFG_TX_DRV_EN |
-			MTK_WED_WDMA_GLO_CFG_TX_DDONE_CHK);
-
 		wed_set(dev, MTK_WED_WPDMA_GLO_CFG,
 			MTK_WED_WPDMA_GLO_CFG_RX_DRV_R0_PKT_PROC |
 			MTK_WED_WPDMA_GLO_CFG_RX_DRV_R0_CRX_SYNC);
@@ -1251,15 +801,6 @@ mtk_wed_dma_enable(struct mtk_wed_device *dev)
 		wed_clr(dev, MTK_WED_WPDMA_GLO_CFG,
 			MTK_WED_WPDMA_GLO_CFG_TX_TKID_KEEP |
 			MTK_WED_WPDMA_GLO_CFG_TX_DMAD_DW3_PREV);
-
-		wed_set(dev, MTK_WED_WPDMA_RX_D_GLO_CFG,
-			MTK_WED_WPDMA_RX_D_RX_DRV_EN |
-			FIELD_PREP(MTK_WED_WPDMA_RX_D_RXD_READ_LEN, 0x18) |
-			FIELD_PREP(MTK_WED_WPDMA_RX_D_INIT_PHASE_RXEN_SEL,
-				   0x2));
-
-		for (i = 0; i < MTK_WED_RX_QUEUES; i++)
-			mtk_wed_check_wfdma_rx_fill(dev, i);
 	}
 }
 
@@ -1268,9 +809,9 @@ mtk_wed_start(struct mtk_wed_device *dev, u32 irq_mask)
 {
 	int i;
 
-	for (i = 0; i < ARRAY_SIZE(dev->rx_wdma); i++)
-		if (!dev->rx_wdma[i].desc)
-			mtk_wed_wdma_rx_ring_setup(dev, i, 16);
+	for (i = 0; i < ARRAY_SIZE(dev->tx_wdma); i++)
+		if (!dev->tx_wdma[i].desc)
+			mtk_wed_wdma_ring_setup(dev, i, 16);
 
 	mtk_wed_hw_init(dev);
 	mtk_wed_configure_irq(dev, irq_mask);
@@ -1285,19 +826,7 @@ mtk_wed_start(struct mtk_wed_device *dev, u32 irq_mask)
 		val |= BIT(0) | (BIT(1) * !!dev->hw->index);
 		regmap_write(dev->hw->mirror, dev->hw->index * 4, val);
 	} else {
-		/* driver set mid ready and only once */
-		wed_w32(dev, MTK_WED_EXT_INT_MASK1,
-			MTK_WED_EXT_INT_STATUS_WPDMA_MID_RDY);
-		wed_w32(dev, MTK_WED_EXT_INT_MASK2,
-			MTK_WED_EXT_INT_STATUS_WPDMA_MID_RDY);
-
-		wed_r32(dev, MTK_WED_EXT_INT_MASK1);
-		wed_r32(dev, MTK_WED_EXT_INT_MASK2);
-
-		if (mtk_wed_rro_cfg(dev))
-			return;
-
-		mtk_wed_set_512_support(dev, dev->wlan.wcid_512);
+		mtk_wed_set_512_support(dev, true);
 	}
 
 	mtk_wed_dma_enable(dev);
@@ -1331,7 +860,7 @@ mtk_wed_attach(struct mtk_wed_device *dev)
 	if (!hw) {
 		module_put(THIS_MODULE);
 		ret = -ENODEV;
-		goto unlock;
+		goto out;
 	}
 
 	device = dev->wlan.bus_type == MTK_WED_BUS_PCIE
@@ -1344,36 +873,23 @@ mtk_wed_attach(struct mtk_wed_device *dev)
 	dev->dev = hw->dev;
 	dev->irq = hw->irq;
 	dev->wdma_idx = hw->index;
-	dev->version = hw->version;
 
 	if (hw->eth->dma_dev == hw->eth->dev &&
 	    of_dma_is_coherent(hw->eth->dev->of_node))
 		mtk_eth_set_dma_device(hw->eth, hw->dev);
 
-	ret = mtk_wed_tx_buffer_alloc(dev);
-	if (ret)
+	ret = mtk_wed_buffer_alloc(dev);
+	if (ret) {
+		mtk_wed_detach(dev);
 		goto out;
-
-	if (mtk_wed_get_rx_capa(dev)) {
-		ret = mtk_wed_rx_buffer_alloc(dev);
-		if (ret)
-			goto out;
-
-		ret = mtk_wed_rro_alloc(dev);
-		if (ret)
-			goto out;
 	}
 
 	mtk_wed_hw_init_early(dev);
-	if (hw->version == 1)
+	if (hw->hifsys)
 		regmap_update_bits(hw->hifsys, HIFSYS_DMA_AG_MAP,
 				   BIT(hw->index), 0);
-	else
-		ret = mtk_wed_wo_init(hw);
+
 out:
-	if (ret)
-		mtk_wed_detach(dev);
-unlock:
 	mutex_unlock(&hw_lock);
 
 	return ret;
@@ -1396,14 +912,13 @@ mtk_wed_tx_ring_setup(struct mtk_wed_device *dev, int idx, void __iomem *regs)
 	 * WDMA RX.
 	 */
 
-	if (WARN_ON(idx >= ARRAY_SIZE(dev->tx_ring)))
-		return -EINVAL;
+	BUG_ON(idx >= ARRAY_SIZE(dev->tx_ring));
 
 	if (mtk_wed_ring_alloc(dev, ring, MTK_WED_TX_RING_SIZE,
-			       sizeof(*ring->desc), true))
+			       sizeof(*ring->desc)))
 		return -ENOMEM;
 
-	if (mtk_wed_wdma_rx_ring_setup(dev, idx, MTK_WED_WDMA_RING_SIZE))
+	if (mtk_wed_wdma_ring_setup(dev, idx, MTK_WED_WDMA_RING_SIZE))
 		return -ENOMEM;
 
 	ring->reg_base = MTK_WED_RING_TX(idx);
@@ -1447,37 +962,6 @@ mtk_wed_txfree_ring_setup(struct mtk_wed_device *dev, void __iomem *regs)
 	return 0;
 }
 
-static int
-mtk_wed_rx_ring_setup(struct mtk_wed_device *dev, int idx, void __iomem *regs)
-{
-	struct mtk_wed_ring *ring = &dev->rx_ring[idx];
-
-	if (WARN_ON(idx >= ARRAY_SIZE(dev->rx_ring)))
-		return -EINVAL;
-
-	if (mtk_wed_ring_alloc(dev, ring, MTK_WED_RX_RING_SIZE,
-			       sizeof(*ring->desc), false))
-		return -ENOMEM;
-
-	if (mtk_wed_wdma_tx_ring_setup(dev, idx, MTK_WED_WDMA_RING_SIZE))
-		return -ENOMEM;
-
-	ring->reg_base = MTK_WED_RING_RX_DATA(idx);
-	ring->wpdma = regs;
-	ring->flags |= MTK_WED_RING_CONFIGURED;
-
-	/* WPDMA ->  WED */
-	wpdma_rx_w32(dev, idx, MTK_WED_RING_OFS_BASE, ring->desc_phys);
-	wpdma_rx_w32(dev, idx, MTK_WED_RING_OFS_COUNT, MTK_WED_RX_RING_SIZE);
-
-	wed_w32(dev, MTK_WED_WPDMA_RING_RX_DATA(idx) + MTK_WED_RING_OFS_BASE,
-		ring->desc_phys);
-	wed_w32(dev, MTK_WED_WPDMA_RING_RX_DATA(idx) + MTK_WED_RING_OFS_COUNT,
-		MTK_WED_RX_RING_SIZE);
-
-	return 0;
-}
-
 static u32
 mtk_wed_irq_get(struct mtk_wed_device *dev, u32 mask)
 {
@@ -1574,9 +1058,7 @@ void mtk_wed_add_hw(struct device_node *np, struct mtk_eth *eth,
 	static const struct mtk_wed_ops wed_ops = {
 		.attach = mtk_wed_attach,
 		.tx_ring_setup = mtk_wed_tx_ring_setup,
-		.rx_ring_setup = mtk_wed_rx_ring_setup,
 		.txfree_ring_setup = mtk_wed_txfree_ring_setup,
-		.msg_update = mtk_wed_mcu_msg_update,
 		.start = mtk_wed_start,
 		.stop = mtk_wed_stop,
 		.reset_dma = mtk_wed_reset_dma,
@@ -1585,7 +1067,6 @@ void mtk_wed_add_hw(struct device_node *np, struct mtk_eth *eth,
 		.irq_get = mtk_wed_irq_get,
 		.irq_set_mask = mtk_wed_irq_set_mask,
 		.detach = mtk_wed_detach,
-		.ppe_check = mtk_wed_ppe_check,
 	};
 	struct device_node *eth_np = eth->dev->of_node;
 	struct platform_device *pdev;
diff --git a/drivers/net/ethernet/mediatek/mtk_wed.h b/drivers/net/ethernet/mediatek/mtk_wed.h
index e012b8a82..ae420ca01 100644
--- a/drivers/net/ethernet/mediatek/mtk_wed.h
+++ b/drivers/net/ethernet/mediatek/mtk_wed.h
@@ -10,7 +10,6 @@
 #include <linux/netdevice.h>
 
 struct mtk_eth;
-struct mtk_wed_wo;
 
 struct mtk_wed_hw {
 	struct device_node *node;
@@ -23,7 +22,6 @@ struct mtk_wed_hw {
 	struct regmap *mirror;
 	struct dentry *debugfs_dir;
 	struct mtk_wed_device *wed_dev;
-	struct mtk_wed_wo *wed_wo;
 	u32 debugfs_reg;
 	u32 num_flows;
 	u8 version;
@@ -86,24 +84,6 @@ wpdma_tx_w32(struct mtk_wed_device *dev, int ring, u32 reg, u32 val)
 	writel(val, dev->tx_ring[ring].wpdma + reg);
 }
 
-static inline u32
-wpdma_rx_r32(struct mtk_wed_device *dev, int ring, u32 reg)
-{
-	if (!dev->rx_ring[ring].wpdma)
-		return 0;
-
-	return readl(dev->rx_ring[ring].wpdma + reg);
-}
-
-static inline void
-wpdma_rx_w32(struct mtk_wed_device *dev, int ring, u32 reg, u32 val)
-{
-	if (!dev->rx_ring[ring].wpdma)
-		return;
-
-	writel(val, dev->rx_ring[ring].wpdma + reg);
-}
-
 static inline u32
 wpdma_txfree_r32(struct mtk_wed_device *dev, u32 reg)
 {
@@ -146,7 +126,6 @@ static inline int mtk_wed_flow_add(int index)
 static inline void mtk_wed_flow_remove(int index)
 {
 }
-
 #endif
 
 #ifdef CONFIG_DEBUG_FS
diff --git a/drivers/net/ethernet/mediatek/mtk_wed_debugfs.c b/drivers/net/ethernet/mediatek/mtk_wed_debugfs.c
index 56f663439..f420f187e 100644
--- a/drivers/net/ethernet/mediatek/mtk_wed_debugfs.c
+++ b/drivers/net/ethernet/mediatek/mtk_wed_debugfs.c
@@ -2,7 +2,6 @@
 /* Copyright (C) 2021 Felix Fietkau <nbd@nbd.name> */
 
 #include <linux/seq_file.h>
-#include <linux/soc/mediatek/mtk_wed.h>
 #include "mtk_wed.h"
 #include "mtk_wed_regs.h"
 
@@ -19,8 +18,6 @@ enum {
 	DUMP_TYPE_WDMA,
 	DUMP_TYPE_WPDMA_TX,
 	DUMP_TYPE_WPDMA_TXFREE,
-	DUMP_TYPE_WPDMA_RX,
-	DUMP_TYPE_WED_RRO,
 };
 
 #define DUMP_STR(_str) { _str, 0, DUMP_TYPE_STRING }
@@ -39,9 +36,6 @@ enum {
 
 #define DUMP_WPDMA_TX_RING(_n) DUMP_RING("WPDMA_TX" #_n, 0, DUMP_TYPE_WPDMA_TX, _n)
 #define DUMP_WPDMA_TXFREE_RING DUMP_RING("WPDMA_RX1", 0, DUMP_TYPE_WPDMA_TXFREE)
-#define DUMP_WPDMA_RX_RING(_n)	DUMP_RING("WPDMA_RX" #_n, 0, DUMP_TYPE_WPDMA_RX, _n)
-#define DUMP_WED_RRO_RING(_base)DUMP_RING("WED_RRO_MIOD", MTK_##_base, DUMP_TYPE_WED_RRO)
-#define DUMP_WED_RRO_FDBK(_base)DUMP_RING("WED_RRO_FDBK", MTK_##_base, DUMP_TYPE_WED_RRO)
 
 static void
 print_reg_val(struct seq_file *s, const char *name, u32 val)
@@ -63,7 +57,6 @@ dump_wed_regs(struct seq_file *s, struct mtk_wed_device *dev,
 				   cur > regs ? "\n" : "",
 				   cur->name);
 			continue;
-		case DUMP_TYPE_WED_RRO:
 		case DUMP_TYPE_WED:
 			val = wed_r32(dev, cur->offset);
 			break;
@@ -76,9 +69,6 @@ dump_wed_regs(struct seq_file *s, struct mtk_wed_device *dev,
 		case DUMP_TYPE_WPDMA_TXFREE:
 			val = wpdma_txfree_r32(dev, cur->offset);
 			break;
-		case DUMP_TYPE_WPDMA_RX:
-			val = wpdma_rx_r32(dev, cur->base, cur->offset);
-			break;
 		}
 		print_reg_val(s, cur->name, val);
 	}
@@ -142,80 +132,6 @@ wed_txinfo_show(struct seq_file *s, void *data)
 }
 DEFINE_SHOW_ATTRIBUTE(wed_txinfo);
 
-static int
-wed_rxinfo_show(struct seq_file *s, void *data)
-{
-	static const struct reg_dump regs[] = {
-		DUMP_STR("WPDMA RX"),
-		DUMP_WPDMA_RX_RING(0),
-		DUMP_WPDMA_RX_RING(1),
-
-		DUMP_STR("WPDMA RX"),
-		DUMP_WED(WED_WPDMA_RX_D_MIB(0)),
-		DUMP_WED_RING(WED_WPDMA_RING_RX_DATA(0)),
-		DUMP_WED(WED_WPDMA_RX_D_PROCESSED_MIB(0)),
-		DUMP_WED(WED_WPDMA_RX_D_MIB(1)),
-		DUMP_WED_RING(WED_WPDMA_RING_RX_DATA(1)),
-		DUMP_WED(WED_WPDMA_RX_D_PROCESSED_MIB(1)),
-		DUMP_WED(WED_WPDMA_RX_D_COHERENT_MIB),
-
-		DUMP_STR("WED RX"),
-		DUMP_WED_RING(WED_RING_RX_DATA(0)),
-		DUMP_WED_RING(WED_RING_RX_DATA(1)),
-
-		DUMP_STR("WED RRO"),
-		DUMP_WED_RRO_RING(WED_RROQM_MIOD_CTRL0),
-		DUMP_WED(WED_RROQM_MID_MIB),
-		DUMP_WED(WED_RROQM_MOD_MIB),
-		DUMP_WED(WED_RROQM_MOD_COHERENT_MIB),
-		DUMP_WED_RRO_FDBK(WED_RROQM_FDBK_CTRL0),
-		DUMP_WED(WED_RROQM_FDBK_IND_MIB),
-		DUMP_WED(WED_RROQM_FDBK_ENQ_MIB),
-		DUMP_WED(WED_RROQM_FDBK_ANC_MIB),
-		DUMP_WED(WED_RROQM_FDBK_ANC2H_MIB),
-
-		DUMP_STR("WED Route QM"),
-		DUMP_WED(WED_RTQM_R2H_MIB(0)),
-		DUMP_WED(WED_RTQM_R2Q_MIB(0)),
-		DUMP_WED(WED_RTQM_Q2H_MIB(0)),
-		DUMP_WED(WED_RTQM_R2H_MIB(1)),
-		DUMP_WED(WED_RTQM_R2Q_MIB(1)),
-		DUMP_WED(WED_RTQM_Q2H_MIB(1)),
-		DUMP_WED(WED_RTQM_Q2N_MIB),
-		DUMP_WED(WED_RTQM_Q2B_MIB),
-		DUMP_WED(WED_RTQM_PFDBK_MIB),
-
-		DUMP_STR("WED WDMA TX"),
-		DUMP_WED(WED_WDMA_TX_MIB),
-		DUMP_WED_RING(WED_WDMA_RING_TX),
-
-		DUMP_STR("WDMA TX"),
-		DUMP_WDMA(WDMA_GLO_CFG),
-		DUMP_WDMA_RING(WDMA_RING_TX(0)),
-		DUMP_WDMA_RING(WDMA_RING_TX(1)),
-
-		DUMP_STR("WED RX BM"),
-		DUMP_WED(WED_RX_BM_BASE),
-		DUMP_WED(WED_RX_BM_RX_DMAD),
-		DUMP_WED(WED_RX_BM_PTR),
-		DUMP_WED(WED_RX_BM_TKID_MIB),
-		DUMP_WED(WED_RX_BM_BLEN),
-		DUMP_WED(WED_RX_BM_STS),
-		DUMP_WED(WED_RX_BM_INTF2),
-		DUMP_WED(WED_RX_BM_INTF),
-		DUMP_WED(WED_RX_BM_ERR_STS),
-	};
-	struct mtk_wed_hw *hw = s->private;
-	struct mtk_wed_device *dev = hw->wed_dev;
-
-	if (!dev)
-		return 0;
-
-	dump_wed_regs(s, dev, regs, ARRAY_SIZE(regs));
-
-	return 0;
-}
-DEFINE_SHOW_ATTRIBUTE(wed_rxinfo);
 
 static int
 mtk_wed_reg_set(void *data, u64 val)
@@ -259,7 +175,4 @@ void mtk_wed_hw_add_debugfs(struct mtk_wed_hw *hw)
 	debugfs_create_u32("regidx", 0600, dir, &hw->debugfs_reg);
 	debugfs_create_file_unsafe("regval", 0600, dir, hw, &fops_regval);
 	debugfs_create_file_unsafe("txinfo", 0400, dir, hw, &wed_txinfo_fops);
-	if (hw->version != 1)
-		debugfs_create_file_unsafe("rxinfo", 0400, dir, hw,
-					   &wed_rxinfo_fops);
 }
diff --git a/drivers/net/ethernet/mediatek/mtk_wed_regs.h b/drivers/net/ethernet/mediatek/mtk_wed_regs.h
index 9e39dace9..e270fb336 100644
--- a/drivers/net/ethernet/mediatek/mtk_wed_regs.h
+++ b/drivers/net/ethernet/mediatek/mtk_wed_regs.h
@@ -4,7 +4,6 @@
 #ifndef __MTK_WED_REGS_H
 #define __MTK_WED_REGS_H
 
-#define MTK_WFDMA_DESC_CTRL_TO_HOST		BIT(8)
 #define MTK_WDMA_DESC_CTRL_LEN1			GENMASK(14, 0)
 #define MTK_WDMA_DESC_CTRL_LEN1_V2		GENMASK(13, 0)
 #define MTK_WDMA_DESC_CTRL_LAST_SEG1		BIT(15)
@@ -29,8 +28,6 @@ struct mtk_wdma_desc {
 #define MTK_WED_RESET_WED_TX_DMA			BIT(12)
 #define MTK_WED_RESET_WDMA_RX_DRV			BIT(17)
 #define MTK_WED_RESET_WDMA_INT_AGENT			BIT(19)
-#define MTK_WED_RESET_RX_RRO_QM				BIT(20)
-#define MTK_WED_RESET_RX_ROUTE_QM			BIT(21)
 #define MTK_WED_RESET_WED				BIT(31)
 
 #define MTK_WED_CTRL					0x00c
@@ -42,12 +39,8 @@ struct mtk_wdma_desc {
 #define MTK_WED_CTRL_WED_TX_BM_BUSY			BIT(9)
 #define MTK_WED_CTRL_WED_TX_FREE_AGENT_EN		BIT(10)
 #define MTK_WED_CTRL_WED_TX_FREE_AGENT_BUSY		BIT(11)
-#define MTK_WED_CTRL_WED_RX_BM_EN			BIT(12)
-#define MTK_WED_CTRL_WED_RX_BM_BUSY			BIT(13)
-#define MTK_WED_CTRL_RX_RRO_QM_EN			BIT(14)
-#define MTK_WED_CTRL_RX_RRO_QM_BUSY			BIT(15)
-#define MTK_WED_CTRL_RX_ROUTE_QM_EN			BIT(16)
-#define MTK_WED_CTRL_RX_ROUTE_QM_BUSY			BIT(17)
+#define MTK_WED_CTRL_RESERVE_EN				BIT(12)
+#define MTK_WED_CTRL_RESERVE_BUSY			BIT(13)
 #define MTK_WED_CTRL_FINAL_DIDX_READ			BIT(24)
 #define MTK_WED_CTRL_ETH_DMAD_FMT			BIT(25)
 #define MTK_WED_CTRL_MIB_READ_CLEAR			BIT(28)
@@ -69,9 +62,6 @@ struct mtk_wdma_desc {
 #define MTK_WED_EXT_INT_STATUS_TX_DMA_R_RESP_ERR	BIT(22)
 #define MTK_WED_EXT_INT_STATUS_TX_DMA_W_RESP_ERR	BIT(23)
 #define MTK_WED_EXT_INT_STATUS_RX_DRV_DMA_RECYCLE	BIT(24)
-#define MTK_WED_EXT_INT_STATUS_RX_DRV_GET_BM_DMAD_SKIP	BIT(25)
-#define MTK_WED_EXT_INT_STATUS_WPDMA_RX_D_DRV_ERR	BIT(26)
-#define MTK_WED_EXT_INT_STATUS_WPDMA_MID_RDY		BIT(27)
 #define MTK_WED_EXT_INT_STATUS_ERROR_MASK		(MTK_WED_EXT_INT_STATUS_TF_LEN_ERR | \
 							 MTK_WED_EXT_INT_STATUS_TKID_WO_PYLD | \
 							 MTK_WED_EXT_INT_STATUS_TKID_TITO_INVALID | \
@@ -81,8 +71,6 @@ struct mtk_wdma_desc {
 							 MTK_WED_EXT_INT_STATUS_TX_DMA_R_RESP_ERR)
 
 #define MTK_WED_EXT_INT_MASK				0x028
-#define MTK_WED_EXT_INT_MASK1				0x02c
-#define MTK_WED_EXT_INT_MASK2				0x030
 
 #define MTK_WED_STATUS					0x060
 #define MTK_WED_STATUS_TX				GENMASK(15, 8)
@@ -163,9 +151,7 @@ struct mtk_wdma_desc {
 #define MTK_WED_RING_TX(_n)				(0x300 + (_n) * 0x10)
 
 #define MTK_WED_RING_RX(_n)				(0x400 + (_n) * 0x10)
-#define MTK_WED_RING_RX_DATA(_n)			(0x420 + (_n) * 0x10)
 
-#define MTK_WED_SCR0					0x3c0
 #define MTK_WED_WPDMA_INT_TRIGGER			0x504
 #define MTK_WED_WPDMA_INT_TRIGGER_RX_DONE		BIT(1)
 #define MTK_WED_WPDMA_INT_TRIGGER_TX_DONE		GENMASK(5, 4)
@@ -226,12 +212,6 @@ struct mtk_wdma_desc {
 #define MTK_WED_WPDMA_INT_CTRL_TX1_DONE_TRIG		GENMASK(14, 10)
 
 #define MTK_WED_WPDMA_INT_CTRL_RX			0x534
-#define MTK_WED_WPDMA_INT_CTRL_RX0_EN			BIT(0)
-#define MTK_WED_WPDMA_INT_CTRL_RX0_CLR			BIT(1)
-#define MTK_WED_WPDMA_INT_CTRL_RX0_DONE_TRIG		GENMASK(6, 2)
-#define MTK_WED_WPDMA_INT_CTRL_RX1_EN			BIT(8)
-#define MTK_WED_WPDMA_INT_CTRL_RX1_CLR			BIT(9)
-#define MTK_WED_WPDMA_INT_CTRL_RX1_DONE_TRIG		GENMASK(14, 10)
 
 #define MTK_WED_WPDMA_INT_CTRL_TX_FREE			0x538
 #define MTK_WED_WPDMA_INT_CTRL_TX_FREE_DONE_EN		BIT(0)
@@ -261,34 +241,11 @@ struct mtk_wdma_desc {
 
 #define MTK_WED_WPDMA_RING_TX(_n)			(0x600 + (_n) * 0x10)
 #define MTK_WED_WPDMA_RING_RX(_n)			(0x700 + (_n) * 0x10)
-#define MTK_WED_WPDMA_RING_RX_DATA(_n)			(0x730 + (_n) * 0x10)
-
-#define MTK_WED_WPDMA_RX_D_GLO_CFG			0x75c
-#define MTK_WED_WPDMA_RX_D_RX_DRV_EN			BIT(0)
-#define MTK_WED_WPDMA_RX_D_INIT_PHASE_RXEN_SEL		GENMASK(11, 7)
-#define MTK_WED_WPDMA_RX_D_RXD_READ_LEN			GENMASK(31, 24)
-
-#define MTK_WED_WPDMA_RX_D_RST_IDX			0x760
-#define MTK_WED_WPDMA_RX_D_RST_CRX_IDX			GENMASK(17, 16)
-#define MTK_WED_WPDMA_RX_D_RST_DRV_IDX			GENMASK(25, 24)
-
-#define MTK_WED_WPDMA_RX_GLO_CFG			0x76c
-#define MTK_WED_WPDMA_RX_RING				0x770
-
-#define MTK_WED_WPDMA_RX_D_MIB(_n)			(0x774 + (_n) * 4)
-#define MTK_WED_WPDMA_RX_D_PROCESSED_MIB(_n)		(0x784 + (_n) * 4)
-#define MTK_WED_WPDMA_RX_D_COHERENT_MIB			0x78c
-
-#define MTK_WED_WDMA_RING_TX				0x800
-
-#define MTK_WED_WDMA_TX_MIB				0x810
-
 #define MTK_WED_WDMA_RING_RX(_n)			(0x900 + (_n) * 0x10)
 #define MTK_WED_WDMA_RX_THRES(_n)			(0x940 + (_n) * 0x4)
 
 #define MTK_WED_WDMA_GLO_CFG				0xa04
 #define MTK_WED_WDMA_GLO_CFG_TX_DRV_EN			BIT(0)
-#define MTK_WED_WDMA_GLO_CFG_TX_DDONE_CHK		BIT(1)
 #define MTK_WED_WDMA_GLO_CFG_RX_DRV_EN			BIT(2)
 #define MTK_WED_WDMA_GLO_CFG_RX_DRV_BUSY		BIT(3)
 #define MTK_WED_WDMA_GLO_CFG_BT_SIZE			GENMASK(5, 4)
@@ -333,20 +290,6 @@ struct mtk_wdma_desc {
 #define MTK_WED_WDMA_RX_RECYCLE_MIB(_n)			(0xae8 + (_n) * 4)
 #define MTK_WED_WDMA_RX_PROCESSED_MIB(_n)		(0xaf0 + (_n) * 4)
 
-#define MTK_WED_RX_BM_RX_DMAD				0xd80
-#define MTK_WED_RX_BM_RX_DMAD_SDL0			GENMASK(13, 0)
-
-#define MTK_WED_RX_BM_BASE				0xd84
-#define MTK_WED_RX_BM_INIT_PTR				0xd88
-#define MTK_WED_RX_BM_SW_TAIL				GENMASK(15, 0)
-#define MTK_WED_RX_BM_INIT_SW_TAIL			BIT(16)
-
-#define MTK_WED_RX_PTR					0xd8c
-
-#define MTK_WED_RX_BM_DYN_ALLOC_TH			0xdb4
-#define MTK_WED_RX_BM_DYN_ALLOC_TH_H			GENMASK(31, 16)
-#define MTK_WED_RX_BM_DYN_ALLOC_TH_L			GENMASK(15, 0)
-
 #define MTK_WED_RING_OFS_BASE				0x00
 #define MTK_WED_RING_OFS_COUNT				0x04
 #define MTK_WED_RING_OFS_CPU_IDX			0x08
@@ -357,9 +300,7 @@ struct mtk_wdma_desc {
 
 #define MTK_WDMA_GLO_CFG				0x204
 #define MTK_WDMA_GLO_CFG_TX_DMA_EN			BIT(0)
-#define MTK_WDMA_GLO_CFG_TX_DMA_BUSY			BIT(1)
 #define MTK_WDMA_GLO_CFG_RX_DMA_EN			BIT(2)
-#define MTK_WDMA_GLO_CFG_RX_DMA_BUSY			BIT(3)
 #define MTK_WDMA_GLO_CFG_RX_INFO3_PRERES		BIT(26)
 #define MTK_WDMA_GLO_CFG_RX_INFO2_PRERES		BIT(27)
 #define MTK_WDMA_GLO_CFG_RX_INFO1_PRERES		BIT(28)
@@ -388,70 +329,4 @@ struct mtk_wdma_desc {
 /* DMA channel mapping */
 #define HIFSYS_DMA_AG_MAP				0x008
 
-#define MTK_WED_RTQM_GLO_CFG				0xb00
-#define MTK_WED_RTQM_BUSY				BIT(1)
-#define MTK_WED_RTQM_Q_RST				BIT(2)
-#define MTK_WED_RTQM_Q_DBG_BYPASS			BIT(5)
-#define MTK_WED_RTQM_TXDMAD_FPORT			GENMASK(23, 20)
-
-#define MTK_WED_RTQM_R2H_MIB(_n)			(0xb70 + (_n) * 0x4)
-#define MTK_WED_RTQM_R2Q_MIB(_n)			(0xb78 + (_n) * 0x4)
-#define MTK_WED_RTQM_Q2N_MIB				0xb80
-#define MTK_WED_RTQM_Q2H_MIB(_n)			(0xb84 + (_n) * 0x4)
-
-#define MTK_WED_RTQM_Q2B_MIB				0xb8c
-#define MTK_WED_RTQM_PFDBK_MIB				0xb90
-
-#define MTK_WED_RROQM_GLO_CFG				0xc04
-#define MTK_WED_RROQM_RST_IDX				0xc08
-#define MTK_WED_RROQM_RST_IDX_MIOD			BIT(0)
-#define MTK_WED_RROQM_RST_IDX_FDBK			BIT(4)
-
-#define MTK_WED_RROQM_MIOD_CTRL0			0xc40
-#define MTK_WED_RROQM_MIOD_CTRL1			0xc44
-#define MTK_WED_RROQM_MIOD_CNT				GENMASK(11, 0)
-
-#define MTK_WED_RROQM_MIOD_CTRL2			0xc48
-#define MTK_WED_RROQM_MIOD_CTRL3			0xc4c
-
-#define MTK_WED_RROQM_FDBK_CTRL0			0xc50
-#define MTK_WED_RROQM_FDBK_CTRL1			0xc54
-#define MTK_WED_RROQM_FDBK_CNT				GENMASK(11, 0)
-
-#define MTK_WED_RROQM_FDBK_CTRL2			0xc58
-
-#define MTK_WED_RROQ_BASE_L				0xc80
-#define MTK_WED_RROQ_BASE_H				0xc84
-
-#define MTK_WED_RROQM_MIOD_CFG				0xc8c
-#define MTK_WED_RROQM_MIOD_MID_DW			GENMASK(5, 0)
-#define MTK_WED_RROQM_MIOD_MOD_DW			GENMASK(13, 8)
-#define MTK_WED_RROQM_MIOD_ENTRY_DW			GENMASK(22, 16)
-
-#define MTK_WED_RROQM_MID_MIB				0xcc0
-#define MTK_WED_RROQM_MOD_MIB				0xcc4
-#define MTK_WED_RROQM_MOD_COHERENT_MIB			0xcc8
-#define MTK_WED_RROQM_FDBK_MIB				0xcd0
-#define MTK_WED_RROQM_FDBK_COHERENT_MIB			0xcd4
-#define MTK_WED_RROQM_FDBK_IND_MIB			0xce0
-#define MTK_WED_RROQM_FDBK_ENQ_MIB			0xce4
-#define MTK_WED_RROQM_FDBK_ANC_MIB			0xce8
-#define MTK_WED_RROQM_FDBK_ANC2H_MIB			0xcec
-
-#define MTK_WED_RX_BM_RX_DMAD				0xd80
-#define MTK_WED_RX_BM_BASE				0xd84
-#define MTK_WED_RX_BM_INIT_PTR				0xd88
-#define MTK_WED_RX_BM_PTR				0xd8c
-#define MTK_WED_RX_BM_PTR_HEAD				GENMASK(32, 16)
-#define MTK_WED_RX_BM_PTR_TAIL				GENMASK(15, 0)
-
-#define MTK_WED_RX_BM_BLEN				0xd90
-#define MTK_WED_RX_BM_STS				0xd94
-#define MTK_WED_RX_BM_INTF2				0xd98
-#define MTK_WED_RX_BM_INTF				0xd9c
-#define MTK_WED_RX_BM_ERR_STS				0xda8
-
-#define MTK_WED_WOCPU_VIEW_MIOD_BASE			0x8000
-#define MTK_WED_PCIE_INT_MASK				0x0
-
 #endif
diff --git a/include/linux/soc/mediatek/mtk_wed.h b/include/linux/soc/mediatek/mtk_wed.h
index 8294978f4..4450c8b7a 100644
--- a/include/linux/soc/mediatek/mtk_wed.h
+++ b/include/linux/soc/mediatek/mtk_wed.h
@@ -5,76 +5,27 @@
 #include <linux/rcupdate.h>
 #include <linux/regmap.h>
 #include <linux/pci.h>
-#include <linux/skbuff.h>
 
 #define MTK_WED_TX_QUEUES		2
-#define MTK_WED_RX_QUEUES		2
-
-#define WED_WO_STA_REC			0x6
 
 struct mtk_wed_hw;
 struct mtk_wdma_desc;
 
-enum mtk_wed_wo_cmd {
-	MTK_WED_WO_CMD_WED_CFG,
-	MTK_WED_WO_CMD_WED_RX_STAT,
-	MTK_WED_WO_CMD_RRO_SER,
-	MTK_WED_WO_CMD_DBG_INFO,
-	MTK_WED_WO_CMD_DEV_INFO,
-	MTK_WED_WO_CMD_BSS_INFO,
-	MTK_WED_WO_CMD_STA_REC,
-	MTK_WED_WO_CMD_DEV_INFO_DUMP,
-	MTK_WED_WO_CMD_BSS_INFO_DUMP,
-	MTK_WED_WO_CMD_STA_REC_DUMP,
-	MTK_WED_WO_CMD_BA_INFO_DUMP,
-	MTK_WED_WO_CMD_FBCMD_Q_DUMP,
-	MTK_WED_WO_CMD_FW_LOG_CTRL,
-	MTK_WED_WO_CMD_LOG_FLUSH,
-	MTK_WED_WO_CMD_CHANGE_STATE,
-	MTK_WED_WO_CMD_CPU_STATS_ENABLE,
-	MTK_WED_WO_CMD_CPU_STATS_DUMP,
-	MTK_WED_WO_CMD_EXCEPTION_INIT,
-	MTK_WED_WO_CMD_PROF_CTRL,
-	MTK_WED_WO_CMD_STA_BA_DUMP,
-	MTK_WED_WO_CMD_BA_CTRL_DUMP,
-	MTK_WED_WO_CMD_RXCNT_CTRL,
-	MTK_WED_WO_CMD_RXCNT_INFO,
-	MTK_WED_WO_CMD_SET_CAP,
-	MTK_WED_WO_CMD_CCIF_RING_DUMP,
-	MTK_WED_WO_CMD_WED_END
-};
-
-struct mtk_rxbm_desc {
-	__le32 buf0;
-	__le32 token;
-} __packed __aligned(4);
-
 enum mtk_wed_bus_tye {
 	MTK_WED_BUS_PCIE,
 	MTK_WED_BUS_AXI,
 };
 
-#define MTK_WED_RING_CONFIGURED		BIT(0)
 struct mtk_wed_ring {
 	struct mtk_wdma_desc *desc;
 	dma_addr_t desc_phys;
 	u32 desc_size;
 	int size;
-	u32 flags;
 
 	u32 reg_base;
 	void __iomem *wpdma;
 };
 
-struct mtk_wed_wo_rx_stats {
-	__le16 wlan_idx;
-	__le16 tid;
-	__le32 rx_pkt_cnt;
-	__le32 rx_byte_cnt;
-	__le32 rx_err_cnt;
-	__le32 rx_drop_cnt;
-};
-
 struct mtk_wed_device {
 #ifdef CONFIG_NET_MEDIATEK_SOC_WED
 	const struct mtk_wed_ops *ops;
@@ -83,33 +34,17 @@ struct mtk_wed_device {
 	bool init_done, running;
 	int wdma_idx;
 	int irq;
-	u8 version;
 
 	struct mtk_wed_ring tx_ring[MTK_WED_TX_QUEUES];
-	struct mtk_wed_ring rx_ring[MTK_WED_RX_QUEUES];
 	struct mtk_wed_ring txfree_ring;
 	struct mtk_wed_ring tx_wdma[MTK_WED_TX_QUEUES];
-	struct mtk_wed_ring rx_wdma[MTK_WED_RX_QUEUES];
 
 	struct {
 		int size;
 		void **pages;
 		struct mtk_wdma_desc *desc;
 		dma_addr_t desc_phys;
-	} tx_buf_ring;
-
-	struct {
-		int size;
-		struct page_frag_cache rx_page;
-		struct mtk_rxbm_desc *desc;
-		dma_addr_t desc_phys;
-	} rx_buf_ring;
-
-	struct {
-		struct mtk_wed_ring ring;
-		dma_addr_t miod_phys;
-		dma_addr_t fdbk_phys;
-	} rro;
+	} buf_ring;
 
 	/* filled by driver: */
 	struct {
@@ -118,36 +53,22 @@ struct mtk_wed_device {
 			struct pci_dev *pci_dev;
 		};
 		enum mtk_wed_bus_tye bus_type;
-		void __iomem *base;
-		u32 phy_base;
 
 		u32 wpdma_phys;
 		u32 wpdma_int;
 		u32 wpdma_mask;
 		u32 wpdma_tx;
 		u32 wpdma_txfree;
-		u32 wpdma_rx_glo;
-		u32 wpdma_rx;
-
-		bool wcid_512;
 
 		u16 token_start;
 		unsigned int nbuf;
-		unsigned int rx_nbuf;
-		unsigned int rx_npkt;
-		unsigned int rx_size;
 
 		u8 tx_tbit[MTK_WED_TX_QUEUES];
-		u8 rx_tbit[MTK_WED_RX_QUEUES];
 		u8 txfree_tbit;
 
 		u32 (*init_buf)(void *ptr, dma_addr_t phys, int token_id);
 		int (*offload_enable)(struct mtk_wed_device *wed);
 		void (*offload_disable)(struct mtk_wed_device *wed);
-		u32 (*init_rx_buf)(struct mtk_wed_device *wed, int size);
-		void (*release_rx_buf)(struct mtk_wed_device *wed);
-		void (*update_wo_rx_stats)(struct mtk_wed_device *wed,
-					   struct mtk_wed_wo_rx_stats *stats);
 	} wlan;
 #endif
 };
@@ -156,15 +77,9 @@ struct mtk_wed_ops {
 	int (*attach)(struct mtk_wed_device *dev);
 	int (*tx_ring_setup)(struct mtk_wed_device *dev, int ring,
 			     void __iomem *regs);
-	int (*rx_ring_setup)(struct mtk_wed_device *dev, int ring,
-			     void __iomem *regs);
 	int (*txfree_ring_setup)(struct mtk_wed_device *dev,
 				 void __iomem *regs);
-	int (*msg_update)(struct mtk_wed_device *dev, int cmd_id,
-			  void *data, int len);
 	void (*detach)(struct mtk_wed_device *dev);
-	void (*ppe_check)(struct mtk_wed_device *dev, struct sk_buff *skb,
-			  u32 reason, u32 hash);
 
 	void (*stop)(struct mtk_wed_device *dev);
 	void (*start)(struct mtk_wed_device *dev, u32 irq_mask);
@@ -199,16 +114,6 @@ mtk_wed_device_attach(struct mtk_wed_device *dev)
 	return ret;
 }
 
-static inline bool
-mtk_wed_get_rx_capa(struct mtk_wed_device *dev)
-{
-#ifdef CONFIG_NET_MEDIATEK_SOC_WED
-	return dev->version != 1;
-#else
-	return false;
-#endif
-}
-
 #ifdef CONFIG_NET_MEDIATEK_SOC_WED
 #define mtk_wed_device_active(_dev) !!(_dev)->ops
 #define mtk_wed_device_detach(_dev) (_dev)->ops->detach(_dev)
@@ -225,12 +130,6 @@ mtk_wed_get_rx_capa(struct mtk_wed_device *dev)
 	(_dev)->ops->irq_get(_dev, _mask)
 #define mtk_wed_device_irq_set_mask(_dev, _mask) \
 	(_dev)->ops->irq_set_mask(_dev, _mask)
-#define mtk_wed_device_rx_ring_setup(_dev, _ring, _regs) \
-	(_dev)->ops->rx_ring_setup(_dev, _ring, _regs)
-#define mtk_wed_device_ppe_check(_dev, _skb, _reason, _hash) \
-	(_dev)->ops->ppe_check(_dev, _skb, _reason, _hash)
-#define mtk_wed_device_update_msg(_dev, _id, _msg, _len) \
-	(_dev)->ops->msg_update(_dev, _id, _msg, _len)
 #else
 static inline bool mtk_wed_device_active(struct mtk_wed_device *dev)
 {
@@ -244,9 +143,6 @@ static inline bool mtk_wed_device_active(struct mtk_wed_device *dev)
 #define mtk_wed_device_reg_write(_dev, _reg, _val) do {} while (0)
 #define mtk_wed_device_irq_get(_dev, _mask) 0
 #define mtk_wed_device_irq_set_mask(_dev, _mask) do {} while (0)
-#define mtk_wed_device_rx_ring_setup(_dev, _ring, _regs) -ENODEV
-#define mtk_wed_device_ppe_check(_dev, _skb, _reason, _hash)  do {} while (0)
-#define mtk_wed_device_update_msg(_dev, _id, _msg, _len) -ENODEV
 #endif
 
 #endif
